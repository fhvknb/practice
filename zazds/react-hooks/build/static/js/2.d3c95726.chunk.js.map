{"version":3,"sources":["components/virtualList.js"],"names":["allData","i","push","itemSize","visibleCount","Math","ceil","screenHeight","start","end","visibleData","slice","min","length","VirtualList","React","useCallback","useState","useEffect","memo","listData","setListData","$","css","className","onScroll","e","scrollTop","target","floor","trnaslateHeight","console","log","map","item","idx"],"mappings":"kIAQA,I,kDAJIA,EAAU,GAILC,EAAI,EAAGA,EAFJ,IAEeA,IACzBD,EAAQE,KAAKD,GAGf,IAAIE,EAAW,GAGXC,EAAeC,KAAKC,KAAKC,IACzBC,EAAQ,EACRC,EAAMD,EAAQJ,EACdM,EAAcV,EAAQW,MAAMH,EAAOH,KAAKO,IAAIH,EAAKT,EAAQa,SAqD9CC,UAlDK,WAC+BC,IAA3CC,YADyB,IACZC,EAA8BF,IAA9BE,SAAUC,EAAoBH,IAApBG,UADC,GACmBH,IAATI,KAEVF,EAAS,KAHT,mBAGzBG,EAHyB,KAGfC,EAHe,KA0C9B,OArCAH,GAAU,WACRI,IAAE,eAAeC,IAAI,SAAUvB,EAAQa,OAASV,EAAW,MAE3DkB,EAAYX,KAEX,IAiCD,sBAAKc,UAAU,WAAWC,SAjB5B,SAAsBC,GACpB,IACIC,EADMD,EAAEE,OACQD,UACpBnB,EAAQH,KAAKwB,MAAMF,EAAYxB,GAC/BM,EAAMD,EAAQJ,EACAuB,EAAaA,EAAYxB,EAEvC,IAAI2B,EAAkBtB,EAAQL,EAE9BmB,IAAE,gBAAgBC,IAChB,YADF,yBAEoBO,EAFpB,WAtBApB,EAAcV,EAAQW,MAAMH,EAAOH,KAAKO,IAAIH,EAAKT,EAAQa,SACzDkB,QAAQC,IAAItB,GACZW,EAAYX,IA4BZ,UACE,qBAAKc,UAAU,eACf,qBAAKA,UAAU,cAAf,SA1BKJ,EAASa,KAAI,SAACC,EAAMC,GAAP,OAClB,mBAAGX,UAAU,OAAb,SACGU,GADsBC","file":"static/js/2.d3c95726.chunk.js","sourcesContent":["import React from \"react\";\n\nimport $ from \"jquery\";\n\nlet allData = [];\n\nlet total = 1000;\n\nfor (let i = 1; i < total; i++) {\n  allData.push(i);\n}\n\nlet itemSize = 50;\nlet listHeight = itemSize * total;\nlet screenHeight = 500;\nlet visibleCount = Math.ceil(screenHeight / itemSize);\nlet start = 0;\nlet end = start + visibleCount;\nlet visibleData = allData.slice(start, Math.min(end, allData.length));\nlet startOffset = 0;\n\nconst VirtualList = function () {\n  let { useCallback, useState, useEffect, memo } = React;\n\n  let [listData, setListData] = useState([]);\n\n  useEffect(() => {\n    $(\".blank-list\").css(\"height\", allData.length * itemSize + \"px\");\n\n    setListData(visibleData);\n    // scrollRef.current.on\n  }, []);\n\n  function changeData() {\n    visibleData = allData.slice(start, Math.min(end, allData.length));\n    console.log(visibleData);\n    setListData(visibleData);\n  }\n\n  function renderItem(item) {\n    return listData.map((item, idx) => (\n      <p className=\"item\" key={idx}>\n        {item}\n      </p>\n    ));\n  }\n\n  function handleScroll(e) {\n    let ele = e.target;\n    let scrollTop = ele.scrollTop;\n    start = Math.floor(scrollTop / itemSize);\n    end = start + visibleCount;\n    startOffset = scrollTop - (scrollTop % itemSize);\n\n    let trnaslateHeight = start * itemSize;\n    // setComputedStyle(trnaslateHeight);\n    $(\".entity-list\").css(\n      \"transform\",\n      `translate3d(0, ${trnaslateHeight}px, 0)`\n    );\n    changeData();\n  }\n\n  return (\n    <div className=\"listWrap\" onScroll={handleScroll}>\n      <div className=\"blank-list\"></div>\n      <div className=\"entity-list\">{renderItem()}</div>\n    </div>\n  );\n};\n\nexport default VirtualList;\n"],"sourceRoot":""}